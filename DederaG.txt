%token begin
%token end
%token if
%token then
%token while
%token do
%token procedure
%token function
%token Integer
%token Real
%token Boolean
%token Char
%token type
%token var
%token array
%token of
%token record
%token +
%token -
%token *
%token /
%token mod
%token and
%token or
%token not
%token <
%token <=
%token >
%token >=
%token =
%token <>
%token :=
%token (
%token )
%token [
%token ]
%token ..
%token .
%token ,
%token ;
%token :
%token id
%token konst_int
%token konst_real
%token konst_boolean
%token konst_char

%start PROGRAM
%%
PROGRAM: DEKLARACIE DEFINICIE_PODPROGRAMOV
DEFINICIE_PODPROGRAMOV: DEFINICIA_PODPROGRAMU DEFINICIE_PODPROGRAMOV
 |
DEFINICIA_PODPROGRAMU: HLAVICKA_PODPROGRAMU TELO_PODPROGRAMU
HLAVICKA_PODPROGRAMU: procedure ID ( FORMALNE_PARAMETRE )
 | function ID ( FORMALNE_PARAMETRE ) : TYP
TELO_PODPROGRAMU: DEKLARACIE BLOK
DEKLARACIE: DEKLARACIE_TYPOV DEKLARACIE_PREMENNYCH
DEKLARACIE_TYPOV: DEKLARACIA_TYPU DEKLARACIE_TYPOV
 |
DEKLARACIE_PREMENNYCH: DEKLARACIA_PREMENNYCH DEKLARACIE_PREMENNYCH
 |
FORMALNE_PARAMETRE: DEKLARACIA_FP ZVYSOK_DFP
 |
DEKLARACIA_FP: FORMA ID : TYP
ZVYSOK_DFP: , DEKLARACIA_FP ZVYSOK_DFP
 |
FORMA: var
 |
DEKLARACIA_TYPU: type ID = TYP ;
DEKLARACIA_PREMENNYCH: var ZOZNAM_DEKLARACII
ID: id
TYP: JEDNODUCHY_TYP
 | ID
 | POLE
 | ZAZNAM
JEDNODUCHY_TYP: Integer
 | Real
 | Boolean
 | Char
POLE: array [ DOL .. HOR ] of TYP_PRVKU
DOL: konst_int
HOR: konst_int
TYP_PRVKU: TYP
ZAZNAM: record ZOZNAM_DEKLARACII end
ZOZNAM_DEKLARACII: DEKLARACIA ZOZNAM_DEKLARACII
 |
DEKLARACIA: ZOZNAM_IDENTIFIKATOROV : TYP ;
ZOZNAM_IDENTIFIKATOROV: ID ZVYSOK_ZOZNAMU
ZVYSOK_ZOZNAMU: , ID ZVYSOK_ZOZNAMU
 |
BLOK: begin PRIKAZY end
PRIKAZY: PRIKAZ ; PRIKAZY
 |
PRIKAZ:
 | BLOK
 | PRIKAZ_PRIRADENIA
 | PRIKAZ_IF
 | PRIKAZ_WHILE
 | PRIKAZ_CALL
PRIKAZ_PRIRADENIA: VYRAZ := VYRAZ
PRIKAZ_IF: if VYRAZ then PRIKAZ
PRIKAZ_WHILE: while VYRAZ do PRIKAZ
PRIKAZ_CALL: ID ( SKUTOCNE_PARAMETRE )
SKUTOCNE_PARAMETRE: SP ZVYSOK_SP
 |
SP: VYRAZ
ZVYSOK_SP: , SP ZVYSOK_SP
 |
VYRAZ: VYRAZ LOGICKY_OP OP1
 | OP1
OP1: OP1 RELACNY_OP OP2
 | OP2
OP2: OP2 ADITIVNY_OP OP3
 | OP3
OP3: OP3 MULTIPLIKATIVNY_OP OP4
 | OP4
OP4: KONST
 | PREM
 | ( VYRAZ )
 | UNARNY_OP OP4
LOGICKY_OP: and
 | or
RELACNY_OP: <
 | <=
 | >
 | >=
 | =
 | <>
ADITIVNY_OP: +
 | -
MULTIPLIKATIVNY_OP: *
 | /
 | mod
UNARNY_OP: not
 | -
KONST: konst_int
 | konst_real
 | konst_boolean
 | konst_char
PREM: ID
 | PREM [ VYRAZ ]
 | PREM . ID
%%